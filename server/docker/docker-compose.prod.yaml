name: mem0-prod

services:
  mem0:
    build:
      context: ../..
      dockerfile: server/docker/prod.Dockerfile
    ports:
      - "18888:8000"
    env_file:
      - ../.env.prod
    networks:
      - mem0_network
    volumes:
      - ../logs:/app/logs
      - ../history:/app/history
      - mem0_data:/app/data
    depends_on:
      postgres:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      milvus-standalone:
        condition: service_healthy
    command: bash -c "cd /app && export ENVIRONMENT=production && chmod +x docker/start.prod.sh && ./docker/start.prod.sh"
    restart: unless-stopped
    environment:
      - PYTHONDONTWRITEBYTECODE=1
      - PYTHONUNBUFFERED=1
    user: "0:0"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/docs"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: ankane/pgvector:v0.5.1
    restart: unless-stopped
    ports:
      - "15432:5432"
    shm_size: "128mb"
    networks:
      - mem0_network
    environment:
      POSTGRES_DB: mem0_prod
      POSTGRES_USER: mem0_user
      POSTGRES_PASSWORD: mem0_secure_password_2024
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mem0_user -d mem0_prod"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  neo4j:
    image: neo4j:5.26.4
    restart: unless-stopped
    ports:
      - "17474:7474"
      - "17687:7687"
    networks:
      - mem0_network
    environment:
      NEO4J_AUTH: neo4j/mem0_graph_password_2024
      NEO4J_dbms_default__database: mem0
      NEO4J_dbms_memory_heap_initial__size: 512m
      NEO4J_dbms_memory_heap_max__size: 2G
      NEO4J_dbms_memory_pagecache_size: 1G
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
    healthcheck:
      test: ["CMD", "cypher-shell", "-u", "neo4j", "-p", "mem0_graph_password_2024", "RETURN 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Milvus Dependencies (修复配置)
  etcd:
    container_name: milvus-etcd
    image: quay.io/coreos/etcd:v3.5.18
    environment:
      - ETCD_AUTO_COMPACTION_MODE=revision
      - ETCD_AUTO_COMPACTION_RETENTION=1000
      - ETCD_QUOTA_BACKEND_BYTES=4294967296
      - ETCD_SNAPSHOT_COUNT=50000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/etcd:/etcd
    command: etcd -advertise-client-urls=http://etcd:2379 -listen-client-urls http://0.0.0.0:2379 --data-dir /etcd
    healthcheck:
      test: ["CMD", "etcdctl", "endpoint", "health"]
      interval: 30s
      timeout: 20s
      retries: 3

  minio:
    container_name: milvus-minio
    image: minio/minio:RELEASE.2024-05-28T17-19-04Z
    environment:
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
    ports:
      - "19001:9001"
      - "19000:9000"
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/minio:/minio_data
    command: minio server /minio_data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  milvus-standalone:
    container_name: milvus-standalone
    image: milvusdb/milvus:v2.5.17
    command: ["milvus", "run", "standalone"]
    security_opt:
      - seccomp:unconfined
    environment:
      MINIO_REGION: us-east-1
      ETCD_ENDPOINTS: etcd:2379
      MINIO_ADDRESS: minio:9000
    volumes:
      - ${DOCKER_VOLUME_DIRECTORY:-.}/volumes/milvus:/var/lib/milvus
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
      interval: 30s
      start_period: 90s
      timeout: 20s
      retries: 3
    ports:
      - "19530:19530"
      - "19091:9091"
    depends_on:
      - "etcd"
      - "minio"
  # etcd:
  #   container_name: milvus-etcd-prod
  #   image: quay.io/coreos/etcd:v3.5.18
  #   restart: unless-stopped
  #   environment:
  #     - ETCD_AUTO_COMPACTION_MODE=revision
  #     - ETCD_AUTO_COMPACTION_RETENTION=1000
  #     - ETCD_QUOTA_BACKEND_BYTES=4294967296
  #     - ETCD_SNAPSHOT_COUNT=50000
  #     # 添加关键配置
  #     - ETCD_NAME=etcd
  #     - ETCD_INITIAL_ADVERTISE_PEER_URLS=http://etcd:2380
  #     - ETCD_LISTEN_PEER_URLS=http://0.0.0.0:2380
  #     - ETCD_LISTEN_CLIENT_URLS=http://0.0.0.0:2379
  #     - ETCD_ADVERTISE_CLIENT_URLS=http://etcd:2379
  #     - ETCD_INITIAL_CLUSTER=etcd=http://etcd:2380
  #     - ETCD_INITIAL_CLUSTER_STATE=new
  #     - ETCD_INITIAL_CLUSTER_TOKEN=etcd-cluster
  #   volumes:
  #     - etcd_data:/etcd
  #   command: etcd
  #   ports:
  #     - "12379:2379"
  #     - "12380:2380"
  #   networks:
  #     - mem0_network
  #   healthcheck:
  #     test: ["CMD", "etcdctl", "--endpoints=http://localhost:2379", "endpoint", "health"]
  #     interval: 30s
  #     timeout: 20s
  #     retries: 3

  # minio:
  #   container_name: milvus-minio-prod
  #   image: minio/minio:RELEASE.2024-12-18T13-15-44Z
  #   restart: unless-stopped
  #   environment:
  #     MINIO_ACCESS_KEY: minioadmin
  #     MINIO_SECRET_KEY: minioadmin
  #     # 添加健康检查支持
  #     MINIO_PROMETHEUS_AUTH_TYPE: public
  #   ports:
  #     - "19001:9001"
  #     - "19000:9000"
  #   volumes:
  #     - minio_data:/minio_data
  #   command: minio server /minio_data --console-address ":9001"
  #   networks:
  #     - mem0_network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
  #     interval: 30s
  #     timeout: 20s
  #     retries: 3

  # milvus-standalone:
  #   container_name: milvus-standalone-prod
  #   image: milvusdb/milvus:v2.6.0
  #   restart: unless-stopped
  #   command: ["milvus", "run", "standalone"]
  #   security_opt:
  #     - seccomp:unconfined
  #   environment:
  #     ETCD_ENDPOINTS: etcd:2379
  #     MINIO_ADDRESS: minio:9000
  #     # 修改消息队列类型
  #     MQ_TYPE: rocksmq
  #     # 添加其他重要配置
  #     MINIO_ACCESS_KEY_ID: minioadmin
  #     MINIO_SECRET_ACCESS_KEY: minioadmin
  #     MINIO_USE_SSL: false
  #     MINIO_BUCKET_NAME: milvus-bucket
  #     # 性能优化配置
  #     ROCKSMQ_PATH: /var/lib/milvus/rdb_data
  #     COMMON_STORAGETYPE: minio
  #   volumes:
  #     - milvus_data:/var/lib/milvus
  #   ports:
  #     - "19530:19530"
  #     - "19091:9091"
  #   depends_on:
  #     etcd:
  #       condition: service_healthy
  #     minio:
  #       condition: service_healthy
  #   networks:
  #     - mem0_network
  #   healthcheck:
  #     test: ["CMD", "curl", "-f", "http://localhost:9091/healthz"]
  #     interval: 30s
  #     timeout: 20s
  #     retries: 5
  #     start_period: 60s

networks:
  mem0_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local
  etcd_data:
    driver: local
  minio_data:
    driver: local
  milvus_data:
    driver: local
  mem0_data:
    driver: local